@page
@model ARS_FE.Pages.Staff.FlightManagement.EditModel

@{
    Layout = "_LayoutManage";
    ViewData["Title"] = "Edit Flight";
}

<h2>Edit Flight</h2>

<form method="post">
    <div class="form-group">
        <label asp-for="Flight.FlightId" class="control-label"></label>
        <input asp-for="Flight.FlightId" type="hidden" />
        <div asp-validation-summary="All" class="text-danger"></div>
    </div>

    <div class="form-group">
        <label asp-for="Flight.DepartureTime" class="control-label">Departure Time</label>
        <input asp-for="Flight.DepartureTime" class="form-control" type="datetime-local" id="departureTimeInput" required />
        <span asp-validation-for="Flight.DepartureTime" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Flight.Duration" class="control-label">Duration (in minutes)</label>
        <input asp-for="Flight.Duration" class="form-control" required />
        <span asp-validation-for="Flight.Duration" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Flight.From" class="control-label">From</label>
        <select asp-for="Flight.From" class="form-control" asp-items="ViewBag.From" id="fromSelect" required>
            <option value="">Select Origin</option>
        </select>
        <span asp-validation-for="Flight.From" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Flight.To" class="control-label">To</label>
        <select asp-for="Flight.To" class="form-control" asp-items="ViewBag.To" id="toSelect" required>
            <option value="">Select Destination</option>
        </select>
        <span asp-validation-for="Flight.To" class="text-danger"></span>
    </div>

    <h3>Ticket Class Prices</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Seat Class Name</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.Flight.TicketClassPrices.Count; i++)
            {
                <tr>
                    <td>
                        <input type="text" value="@Model.Flight.TicketClassPrices[i].SeatClassName" class="form-control" readonly />
                    </td>
                    <td>
                        <input asp-for="Flight.TicketClassPrices[i].Price" class="form-control" required />
                        <span asp-validation-for="Flight.TicketClassPrices[i].Price" class="text-danger"></span>
                    </td>
                    <input asp-for="Flight.TicketClassPrices[i].Id" type="hidden" />
                </tr>
            }
        </tbody>
    </table>

    <div class="form-group">
        <input type="submit" value="Update Flight" class="btn btn-primary" />
        <a asp-page="./Index" class="btn btn-secondary">Cancel</a>
    </div>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const flightForm = document.querySelector('form');

            flightForm.addEventListener('submit', function (event) {
                const fromSelect = document.getElementById('fromSelect');
                const toSelect = document.getElementById('toSelect');

                // Check if "From" and "To" fields are the same
                if (fromSelect.value === toSelect.value) {
                    event.preventDefault(); // Prevent form submission
                    alert("The departure location and destination must be different."); // Show alert
                }
            });

            const departureTimeInput = document.getElementById('departureTimeInput');
            const now = new Date();
            const minDateTime = now.toISOString().slice(0, 16); // Format: YYYY-MM-DDTHH:MM

            // Set the minimum value for the departure time input
            departureTimeInput.setAttribute('min', minDateTime);
            departureTimeInput.addEventListener('change', function () {
                const selectedDateTime = new Date(departureTimeInput.value);

                // Compare selected date and current date in milliseconds
                if (selectedDateTime.getTime() < now.getTime()) {
                    // Reset the input if the selected date is in the past
                    departureTimeInput.value = minDateTime;
                    alert("Departure time cannot be in the past. Please select a future date and time.");
                }
            });
        });
    </script>
}
